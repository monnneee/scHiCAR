shell.prefix("set -eo pipefail; echo BEGIN at $(date); ")
shell.suffix("; exitstat=$?; echo END at $(date); echo exit status was $exitstat; exit $exitstat")
import collections
configfile: "config.yaml"

FILES = json.load(open(config['SAMPLES_JSON'])) ##  fastq for each lane
SAMPLES = sorted(FILES.keys())
BWA_INDEX = config['BWA_INDEX']
chromsizes = config['chromsizes']
TARGETS = []
genome = config['genome']
tmp='./tmp'

## looking for the cellular deduplicated pairs. 
TARGETS.extend(expand("bulk_pairs_summary-{genome}/{sample}.read_summary", sample = SAMPLES, genome = genome ))  ## cis/trans ratio for each fastq pairs.
TARGETS.extend(expand("filtered-{genome}/{sample}.barcode.cut_rank", sample = SAMPLES, genome = genome ))

localrules: targetfiles, read_info_summary
rule targetfiles:
    input: TARGETS

## run for each fastq pairs individually. 

## run for each fastq pairs individually. 

rule raw_fq_trim:
    input:
        r1 = lambda wildcards: FILES[wildcards.sample]['R1'],
        r2 = lambda wildcards: FILES[wildcards.sample]['R2']
    output: 
        r1 = "01_raw_fq_update/{sample}_index_L001_R1_001.fastq",
        r2 = "01_raw_fq_update/{sample}_index_L001_R2_001.fastq"
    script:
        "script/raw_fq_update.py"

rule barcode_QC: ## extract total barcodes list
    input: "01_raw_fq_update/{sample}_index_L001_R1_001.fastq"
    output: "02_barcode_info/{sample}_raw_barcode_count.txt"
    threads: 8 
    shell:
        """
        awk  '{{if(NR%4==1) print substr($0,2,28)}}' {input} | sort --parallel={threads} --temporary-directory={tmp}  | uniq -c | sort -nr   > {output} 
        """

rule find_right_barcodes: # mismatch correction for each barcode
    input: "02_barcode_info/{sample}_raw_barcode_count.txt"
    output: sum = "02_barcode_info/{sample}.barcode_final_summary",
            map = "02_barcode_info/{sample}.barcode_final_map",
            log = "02_barcode_info/{sample}.barcode_log"
    script:
        "script/barcode_hash_v2.py"


rule read1_barcode_correction:
    input :
        "01_raw_fq_update/{sample}_index_L001_R1_001.fastq",
        "02_barcode_info/{sample}.barcode_final_map"
    output :
        "03_corrected_fq/{sample}_L001_R1_001.fastq"
    log: "00_log/{sample}_L001_R1_corrected.log"
    script:
        "script/fq_barcode_correction.py"

rule read2_barcode_correction:
    input :
        "01_raw_fq_update/{sample}_index_L001_R2_001.fastq",
        "02_barcode_info/{sample}.barcode_final_map"
    output :
        "03_corrected_fq/{sample}_L001_R2_001.fastq"
    log:"00_log/{sample}_L001_R2_corrected.log"   
    script:
        "script/fq_barcode_correction.py"

rule r1_zip:
    input  : "03_corrected_fq/{sample}_L001_R1_001.fastq"
    output : temp("03_corrected_fq/{sample}_L001_R1_001.fastq.gz")
    threads: 11
    shell:
        "pigz -p {threads} {input}"

rule r2_zip:
    input  : "03_corrected_fq/{sample}_L001_R2_001.fastq"
    output : temp("03_corrected_fq/{sample}_L001_R2_001.fastq.gz")
    threads: 11
    shell:
        "pigz -p {threads} {input}"

rule bind:
    input:
        "03_corrected_fq/{sample}_L001_R1_001.fastq.gz",
        "03_corrected_fq/{sample}_L001_R2_001.fastq.gz"
    output:
        temp("04_bind_fq/{sample}_cutbind_L001_R1_001.fastq.gz"),
        temp("04_bind_fq/{sample}_cutbind_L001_R2_001.fastq.gz")
    threads: 16
    shell:
        """
        cutadapt -Z -j {threads} -e 0.2  -g file:bind_index\
        -o 04_bind_fq/{wildcards.sample}_cut{{name}}_L001_R1_001.fastq.gz \
        -p 04_bind_fq/{wildcards.sample}_cut{{name}}_L001_R2_001.fastq.gz \
        {input[0]}  {input[1]}  
        """

rule ME:
    input:
        "04_bind_fq/{sample}_cutbind_L001_R1_001.fastq.gz",
        "04_bind_fq/{sample}_cutbind_L001_R2_001.fastq.gz"
    output:
        "05_ME_fq/{sample}_cutbind_cutME_L001_R1_001.fastq.gz",
        "05_ME_fq/{sample}_cutbind_cutME_L001_R2_001.fastq.gz"
    threads: 16
    shell:
        """
        cutadapt -Z -j {threads} -e 0.2  -g file:ME_index\
        -o 05_ME_fq/{wildcards.sample}_cutbind_cut{{name}}_L001_R2_001.fastq.gz \
        -p 05_ME_fq/{wildcards.sample}_cutbind_cut{{name}}_L001_R1_001.fastq.gz \
        {input[1]}  {input[0]}  
        """

rule bwa_align:
    input:
        "05_ME_fq/{sample}_cutbind_cutME_L001_R1_001.fastq.gz",
        "05_ME_fq/{sample}_cutbind_cutME_L001_R2_001.fastq.gz"
    output: "06_bam-{genome}/{sample}.bam"
    threads: 16
    message: "bwa {input}: {threads} threads"
    log:
         "00_log-{genome}/{sample}.bwa"
    shell:
        """
        module load BWA ## dcc module
        module load samtools
        bwa mem  -SP -t {threads} {BWA_INDEX} {input} | samtools view -bS - > {output}  2> {log}
        """

rule prase_bam_to_pairs: ## no flip to keep the R1 R2 position for the peak calling, extract 28 bp cell barcode 
    input:  "06_bam-{genome}/{sample}.bam"
    output: "pairs-{genome}/{sample}.select.pairsam.gz",  "pairs-{genome}/{sample}.raw.pairsam.stat"
    message: "prase bam {input} "
    threads: 10
    shell:
        """
        module load samtools ## set the min-mapq as 10
        pairtools parse -c {chromsizes}  \
        --assembly {genome} --min-mapq 10 \
        --max-molecule-size 2000 --max-inter-align-gap 20 \
        --walks-policy mask  --no-flip --drop-seq --drop-sam  \
        --output-stats {output[1]}  {input} | pairtools select '(pair_type=="UU") or (pair_type=="UR") or (pair_type=="RU")' | \
        awk  -F $"\\t" 'BEGIN {{OFS=FS}} ; {{ if($1 ~ /^#/) {{ print $0}} else {{ print substr($1,1,28),$2,$3,$4,$5,$6,$7,$8}}}}' | \
        pbgzip -n {threads} -c > {output[0]}
        """

rule flip_pairs_unique_map_sort_by_position: ## flip and select valid pairs
    input:  "pairs-{genome}/{sample}.select.pairsam.gz"
    output: "pairs-{genome}/{sample}.fliped.select.pairs.gz"
    message: "flip and sort {input} "
    threads: 8
    shell:
        """
         pairtools flip -c {chromsizes} {input} -o {output}
        """

rule flip_pairs_sort_by_cells: # sort pairs by cell and position
    input:  "pairs-{genome}/{sample}.fliped.select.pairs.gz"
    output: "pairs-{genome}/{sample}.cell.sorted.pairs"
    message: " sort by cells {input} "
    threads: 8
    shell:
        """
        export LC_COLLATE=C; export LANG=C;
        zcat {input} | grep -v "^#" | \
        sort -V -k1,1 -k2,2 -k4,4 -k3,3n -k5,5n --stable  --parallel={threads} --temporary-directory={tmp} -S 20G  > {output}
        """

rule gzip_pairs: # sort pairs by cell and position
    input:  "pairs-{genome}/{sample}.cell.sorted.pairs"
    output: "pairs-{genome}/{sample}.cell.sorted.pairs.gz"
    threads: 12
    shell: 
        "pbgzip -n {threads} {input}"


rule cell_pairs_dedup:
    input:  "pairs-{genome}/{sample}.cell.sorted.pairs",  "pairs-{genome}/{sample}.select.pairsam.gz"
    output: "filtered-{genome}/{sample}.dedup.pairs.gz" ,"filtered-{genome}/{sample}.dedup.pairs.stat", "filtered-{genome}/{sample}.dedup.pairs.head"  
    message: "dedup to filted {input} "
    threads: 5
    shell:
        """
        zcat {input[1]} | head -n 2000 | grep "^#" > {output[2]} || true
        cat {output[2]} {input[0]} | pairtools dedup --max-mismatch 1 --method max -o {output[0]}  --output-stats  {output[1]} 
        """

rule extract_barcode_based_on_knee:
    input:  "filtered-{genome}/{sample}.dedup.pairs.gz"
    output: "filtered-{genome}/{sample}.barcode.rank",  "filtered-{genome}/{sample}.barcode.cut_rank"
    message: "dedup to filted {input} "
    threads: 5
    shell:
        """
        zcat {input[0]} | awk '{{if($1!~/^#/) print $1}}' | sort --parallel={threads} --temporary-directory={tmp} | uniq -c | sort -nrk1,1 >  {output[0]}
        Rscript script/extract_barcode_based_on_knee.R {output[0]} 1.1 {output[1]}
        """

rule read_info_summary:  # get basic hic quality for each fastq files
    input:  "pairs-{genome}/{sample}.raw.pairsam.stat", "filtered-{genome}/{sample}.dedup.pairs.stat"
    output: "bulk_pairs_summary-{genome}/{sample}.read_summary"
    threads: 1
    script:
        "script/read_summary.R"



